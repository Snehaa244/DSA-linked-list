#include <iostream>

using namespace std;

// Definition for singly-linked list node
struct ListNode {
    int val;
    ListNode* next;
    ListNode(int x) : val(x), next(NULL) {}
};

int countOccurrences(ListNode* head, int target) {
    int count = 0;
    ListNode* current = head;

    while (current != nullptr) {
        if (current->val == target) {
            count++;
        }
        current = current->next;
    }

    return count;
}

// Utility function to print the linked list
void printList(ListNode* head) {
    ListNode* temp = head;
    while (temp != nullptr) {
        cout << temp->val << " ";
        temp = temp->next;
    }
    cout << endl;
}

int main() {
    // Example usage
    ListNode* head = new ListNode(1);
    head->next = new ListNode(2);
    head->next->next = new ListNode(3);
    head->next->next->next = new ListNode(2);
    head->next->next->next->next = new ListNode(4);
    head->next->next->next->next->next = new ListNode(3);

    cout << "Original List: ";
    printList(head);

    int target = 2;
    int occurrences = countOccurrences(head, target);
    cout << "Number of occurrences of " << target << ": " << occurrences << endl;

    // Free memory
    while (head != nullptr) {
        ListNode* temp = head;
        head = head->next;
        delete temp;
    }

    return 0;
}
